---
export interface Props {
  density?: number;
  speed?: number;
  theme?: 'matrix' | 'neural' | 'quantum';
}

const { density = 800, speed = 0.1, theme = 'neural' } = Astro.props;
---

<div id="cyber-starfield" class="absolute inset-0 overflow-hidden">
  <canvas 
    id="starfield-canvas" 
    data-density={density} 
    data-speed={speed} 
    data-theme={theme}
  ></canvas>
</div>

<script>
  import invariant from "tiny-invariant";

  class CyberStar {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;
    color: string;
    pulse: number;

    constructor(x = 0, y = 0, z = 0, color = "#00D4FF") {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
      this.color = color;
      this.pulse = Math.random() * Math.PI * 2;
    }

    update(width: number, height: number, speed: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675;
      this.x += this.x * (speed * 0.0225) * this.z;
      this.y += this.y * (speed * 0.0225) * this.z;
      this.pulse += 0.02;
      
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    draw(ctx: CanvasRenderingContext2D, theme: string) {
      const opacity = Math.min(this.z * 0.5, 1);
      const pulseOpacity = (Math.sin(this.pulse) + 1) / 2;
      
      // Draw trail
      ctx.lineWidth = this.z * 0.5;
      ctx.strokeStyle = `${this.color}${Math.floor(opacity * 255).toString(16).padStart(2, '0')}`;
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
      
      // Draw star with glow
      if (theme === 'neural' || theme === 'quantum') {
        ctx.shadowBlur = 10 * this.z;
        ctx.shadowColor = this.color;
        ctx.fillStyle = `${this.color}${Math.floor(pulseOpacity * 255).toString(16).padStart(2, '0')}`;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.z * 2, 0, Math.PI * 2);
        ctx.fill();
        ctx.shadowBlur = 0;
      }
    }
  }

  // Color palettes for different themes
  const colorPalettes = {
    matrix: ["#00FF88", "#00CC66", "#00FF44", "#88FF88"],
    neural: ["#663399", "#00D4FF", "#FF00FF", "#00FFFF"],
    quantum: ["#8B5CF6", "#00F5FF", "#FF0080", "#39FF14"]
  };

  const canvas = document.querySelector("#starfield-canvas") as HTMLCanvasElement;
  invariant(canvas, "canvas should not be null");
  
  const ctx = canvas.getContext("2d");
  const container = document.querySelector("#cyber-starfield") as HTMLElement;
  invariant(container, "container should not be null");
  
  // Get configuration from data attributes
  const density = parseInt(canvas.dataset.density || "800");
  const speed = parseFloat(canvas.dataset.speed || "0.1");
  const theme = canvas.dataset.theme || "neural";
  const colors = colorPalettes[theme as keyof typeof colorPalettes] || colorPalettes.neural;
  
  // Create stars with random colors from palette
  const stars = Array.from({ length: density }, () => {
    const color = colors[Math.floor(Math.random() * colors.length)];
    return new CyberStar(0, 0, 0, color);
  });
  
  let rafId = 0;

  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container);

  function setup() {
    invariant(ctx, "canvas context should not be null");
    rafId > 0 && cancelAnimationFrame(rafId);

    const { clientWidth: width, clientHeight: height } = container;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);

    // Initialize star positions
    for (const star of stars) {
      star.x = Math.random() * width - width / 2;
      star.y = Math.random() * height - height / 2;
      star.z = Math.random() * 1;
    }

    ctx.translate(width / 2, height / 2);
    
    // Set composite operation for additive blending
    ctx.globalCompositeOperation = "screen";
    
    rafId = requestAnimationFrame(frame);
  }

  function frame() {
    invariant(ctx, "canvas context should not be null");
    const { clientWidth: width, clientHeight: height } = container;

    // Clear with fade effect
    ctx.fillStyle = "rgba(0, 0, 0, 0.1)";
    ctx.fillRect(-width / 2, -height / 2, width, height);

    // Update and draw stars
    for (const star of stars) {
      star.update(width, height, speed);
      star.draw(ctx, theme);
    }

    rafId = requestAnimationFrame(frame);
  }

  // Respect reduced motion preference
  const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)");
  if (prefersReducedMotion.matches) {
    cancelAnimationFrame(rafId);
  }
</script>

<style>
  #cyber-starfield {
    pointer-events: none;
    opacity: 0.8;
  }
  
  #starfield-canvas {
    width: 100%;
    height: 100%;
  }
</style>