---
import { getCollection } from 'astro:content';
import BaseLayout from '@layouts/BaseLayout.astro';
import { Icon } from 'astro-icon/components';

const pageTitle = 'SwS Blog - Stories from the Scientific Revolution';
const pageDescription = 'Updates from the frontlines of community-powered science. Research breakthroughs, community stories, and the human side of discovery.';

// Get all blog posts and sort by date
const allPosts = await getCollection('blog');
const sortedPosts = allPosts.sort((a, b) => 
  new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()
);

// Get featured posts
const featuredPosts = sortedPosts.filter(post => post.data.featured);
const regularPosts = sortedPosts.filter(post => !post.data.featured);

// Categories for filtering
const categories = [
  { id: 'all', name: 'All Posts', icon: 'mdi:view-grid' },
  { id: 'research', name: 'Research', icon: 'mdi:flask' },
  { id: 'community', name: 'Community', icon: 'mdi:account-group' },
  { id: 'impact', name: 'Impact', icon: 'mdi:chart-line' },
  { id: 'technical', name: 'Technical', icon: 'mdi:code-tags' },
];

function formatDate(date: Date): string {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

function getReadingTime(content: string): number {
  const wordsPerMinute = 200;
  const wordCount = content.split(/\s+/).length;
  return Math.ceil(wordCount / wordsPerMinute);
}
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <!-- Hero Section -->
  <section class="hero-section">
    <div class="container">
      <div class="hero-content" data-scroll-reveal>
        <h1 class="hero-title">
          <span class="title-gradient">Stories from the</span><br>
          <span class="title-emphasis">Scientific Revolution</span>
        </h1>
        <p class="hero-description">
          Updates from the frontlines of community-powered science. Research breakthroughs, 
          community stories, and the human side of discovery.
        </p>
      </div>
    </div>
  </section>

  <!-- Category Filter -->
  <section class="filter-section">
    <div class="container">
      <div class="filter-tabs" data-scroll-reveal>
        {categories.map((category) => (
          <button 
            class="filter-tab" 
            data-category={category.id}
            aria-label={`Filter by ${category.name}`}
          >
            <Icon name={category.icon} class="tab-icon" />
            <span>{category.name}</span>
          </button>
        ))}
      </div>
    </div>
  </section>

  <!-- Featured Posts -->
  {featuredPosts.length > 0 && (
    <section class="featured-section">
      <div class="container">
        <h2 class="section-title" data-scroll-reveal>Featured Stories</h2>
        <div class="featured-grid">
          {featuredPosts.slice(0, 2).map((post, index) => (
            <article 
              class="featured-card" 
              data-scroll-reveal
              data-delay={index * 100}
              data-category={post.data.category}
            >
              {post.data.heroImage && (
                <div class="card-image">
                  <img 
                    src={post.data.heroImage} 
                    alt={post.data.title}
                    loading="lazy"
                  />
                </div>
              )}
              <div class="card-content">
                <div class="card-meta">
                  <span class="category-tag" data-category={post.data.category}>
                    {post.data.category}
                  </span>
                  <time datetime={post.data.publishDate.toISOString()}>
                    {formatDate(post.data.publishDate)}
                  </time>
                </div>
                <h3 class="card-title">
                  <a href={`/blog/${post.slug}/`}>{post.data.title}</a>
                </h3>
                <p class="card-description">{post.data.description}</p>
                <div class="card-footer">
                  <span class="author">by {post.data.author}</span>
                  <span class="reading-time">{getReadingTime(post.body)} min read</span>
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- All Posts -->
  <section class="posts-section">
    <div class="container">
      <h2 class="section-title" data-scroll-reveal>All Posts</h2>
      
      {sortedPosts.length === 0 ? (
        <div class="empty-state" data-scroll-reveal>
          <Icon name="mdi:file-document-outline" class="empty-icon" />
          <h3>Coming Soon!</h3>
          <p>We're brewing up some amazing stories from the scientific revolution. Check back soon for updates from our community, research breakthroughs, and behind-the-scenes insights.</p>
          <a href="/get-involved" class="cta-button">
            Join the Story
            <Icon name="mdi:arrow-right" class="button-icon" />
          </a>
        </div>
      ) : (
        <div class="posts-grid">
          {sortedPosts.map((post, index) => (
            <article 
              class="post-card" 
              data-scroll-reveal
              data-delay={index * 50}
              data-category={post.data.category}
            >
              {post.data.heroImage && (
                <div class="card-image">
                  <img 
                    src={post.data.heroImage} 
                    alt={post.data.title}
                    loading="lazy"
                  />
                </div>
              )}
              <div class="card-content">
                <div class="card-meta">
                  <span class="category-tag" data-category={post.data.category}>
                    {post.data.category}
                  </span>
                  <time datetime={post.data.publishDate.toISOString()}>
                    {formatDate(post.data.publishDate)}
                  </time>
                </div>
                <h3 class="card-title">
                  <a href={`/blog/${post.slug}/`}>{post.data.title}</a>
                </h3>
                <p class="card-description">{post.data.description}</p>
                <div class="card-footer">
                  <span class="author">by {post.data.author}</span>
                  <span class="reading-time">{getReadingTime(post.body)} min read</span>
                </div>
                {post.data.tags.length > 0 && (
                  <div class="card-tags">
                    {post.data.tags.slice(0, 3).map(tag => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                )}
              </div>
            </article>
          ))}
        </div>
      )}
    </div>
  </section>

  <!-- Newsletter CTA -->
  <section class="newsletter-section">
    <div class="container">
      <div class="newsletter-card" data-scroll-reveal>
        <Icon name="mdi:email-newsletter" class="newsletter-icon" />
        <h3>Stay in the Loop</h3>
        <p>Get the latest stories from the scientific revolution delivered to your inbox.</p>
        <form class="newsletter-form" action="#" method="post">
          <input 
            type="email" 
            placeholder="Enter your email" 
            required
            class="newsletter-input"
          />
          <button type="submit" class="newsletter-button">
            Subscribe
            <Icon name="mdi:send" class="button-icon" />
          </button>
        </form>
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  /* Hero Section */
  .hero-section {
    padding: 8rem 0 4rem;
    background: radial-gradient(ellipse at center, rgba(102, 51, 153, 0.1) 0%, transparent 70%);
  }

  .hero-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  .hero-title {
    font-family: var(--font-display);
    font-size: clamp(3rem, 8vw, 5rem);
    font-weight: 900;
    line-height: 1.1;
    margin-bottom: 2rem;
  }

  .title-gradient {
    background: var(--neural-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    filter: drop-shadow(0 0 30px rgba(102, 51, 153, 0.5));
  }

  .title-emphasis {
    color: var(--warp-core-blue);
    text-shadow: 0 0 40px rgba(0, 212, 255, 0.5);
  }

  .hero-description {
    font-size: 1.25rem;
    color: var(--text-secondary);
    line-height: 1.6;
    max-width: 600px;
    margin: 0 auto;
  }

  /* Container */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* Filter Section */
  .filter-section {
    padding: 3rem 0;
    background: rgba(0, 0, 0, 0.2);
  }

  .filter-tabs {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .filter-tab {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(102, 51, 153, 0.3);
    border-radius: 8px;
    color: var(--text-secondary);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .filter-tab:hover,
  .filter-tab.active {
    background: rgba(102, 51, 153, 0.2);
    border-color: var(--royal-purple);
    color: var(--text-primary);
    transform: translateY(-2px);
  }

  .tab-icon {
    width: 1rem;
    height: 1rem;
  }

  /* Section Titles */
  .section-title {
    font-family: var(--font-display);
    font-size: 2.5rem;
    text-align: center;
    margin-bottom: 3rem;
    background: var(--neural-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    filter: drop-shadow(0 0 20px rgba(102, 51, 153, 0.5));
  }

  /* Featured Section */
  .featured-section {
    padding: 5rem 0;
  }

  .featured-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
    gap: 2rem;
  }

  .featured-card {
    background: rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(102, 51, 153, 0.3);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    opacity: 0;
    transform: translateY(20px);
  }

  .featured-card.revealed {
    opacity: 1;
    transform: translateY(0);
  }

  .featured-card:hover {
    transform: translateY(-10px);
    border-color: var(--warp-core-blue);
    box-shadow: 0 20px 40px rgba(0, 212, 255, 0.2);
  }

  /* Posts Section */
  .posts-section {
    padding: 5rem 0;
    background: linear-gradient(180deg, transparent, rgba(0, 212, 255, 0.05), transparent);
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .post-card {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(0, 212, 255, 0.3);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    opacity: 0;
    transform: translateY(20px);
  }

  .post-card.revealed {
    opacity: 1;
    transform: translateY(0);
  }

  .post-card:hover {
    transform: translateY(-5px);
    border-color: var(--warp-core-blue);
    box-shadow: 0 10px 30px rgba(0, 212, 255, 0.2);
  }

  /* Card Styles */
  .card-image {
    aspect-ratio: 16/9;
    overflow: hidden;
  }

  .card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .card-image:hover img {
    transform: scale(1.05);
  }

  .card-content {
    padding: 2rem;
  }

  .card-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    font-size: 0.875rem;
  }

  .category-tag {
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-weight: 500;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .category-tag[data-category="research"] {
    background: rgba(0, 212, 255, 0.2);
    color: var(--warp-core-blue);
  }

  .category-tag[data-category="community"] {
    background: rgba(0, 255, 136, 0.2);
    color: var(--plasma-green);
  }

  .category-tag[data-category="impact"] {
    background: rgba(255, 0, 255, 0.2);
    color: var(--cyber-pink);
  }

  .category-tag[data-category="technical"] {
    background: rgba(0, 255, 255, 0.2);
    color: var(--hologram-cyan);
  }

  .card-meta time {
    color: var(--text-tertiary);
  }

  .card-title {
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
    line-height: 1.3;
  }

  .card-title a {
    color: var(--text-primary);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .card-title a:hover {
    color: var(--warp-core-blue);
  }

  .card-description {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }

  .card-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 1rem;
    border-top: 1px solid rgba(102, 51, 153, 0.2);
    font-size: 0.875rem;
    color: var(--text-tertiary);
  }

  .card-tags {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    flex-wrap: wrap;
  }

  .tag {
    padding: 0.25rem 0.5rem;
    background: rgba(102, 51, 153, 0.2);
    border-radius: 4px;
    font-size: 0.75rem;
    color: var(--royal-purple);
  }

  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 5rem 2rem;
    max-width: 500px;
    margin: 0 auto;
  }

  .empty-icon {
    width: 4rem;
    height: 4rem;
    color: var(--text-tertiary);
    margin-bottom: 2rem;
  }

  .empty-state h3 {
    font-size: 1.5rem;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .empty-state p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 2rem;
  }

  .cta-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 2rem;
    background: var(--neural-gradient);
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .cta-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(102, 51, 153, 0.3);
  }

  .button-icon {
    width: 1rem;
    height: 1rem;
  }

  /* Newsletter Section */
  .newsletter-section {
    padding: 5rem 0;
    background: radial-gradient(ellipse at center, rgba(102, 51, 153, 0.15) 0%, transparent 70%);
  }

  .newsletter-card {
    background: rgba(0, 0, 0, 0.6);
    border: 1px solid rgba(102, 51, 153, 0.4);
    border-radius: 12px;
    padding: 3rem;
    text-align: center;
    max-width: 600px;
    margin: 0 auto;
  }

  .newsletter-icon {
    width: 3rem;
    height: 3rem;
    color: var(--warp-core-blue);
    margin-bottom: 1.5rem;
  }

  .newsletter-card h3 {
    font-size: 1.5rem;
    color: var(--text-primary);
    margin-bottom: 0.75rem;
  }

  .newsletter-card p {
    color: var(--text-secondary);
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .newsletter-form {
    display: flex;
    gap: 1rem;
    max-width: 400px;
    margin: 0 auto;
  }

  .newsletter-input {
    flex: 1;
    padding: 0.75rem 1rem;
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(102, 51, 153, 0.3);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 1rem;
  }

  .newsletter-input:focus {
    outline: none;
    border-color: var(--warp-core-blue);
    box-shadow: 0 0 0 2px rgba(0, 212, 255, 0.2);
  }

  .newsletter-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: var(--warp-core-blue);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .newsletter-button:hover {
    background: var(--cyber-pink);
    transform: translateY(-2px);
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .hero-section {
      padding: 6rem 0 3rem;
    }

    .featured-grid {
      grid-template-columns: 1fr;
    }

    .posts-grid {
      grid-template-columns: 1fr;
    }

    .filter-tabs {
      gap: 0.5rem;
    }

    .filter-tab {
      padding: 0.5rem 1rem;
      font-size: 0.75rem;
    }

    .newsletter-form {
      flex-direction: column;
    }
  }

  /* Filter functionality */
  .post-card[data-category]:not([data-category="all"]) {
    display: none;
  }

  .post-card[data-category="all"],
  .filter-tab[data-category="all"].active ~ * .post-card {
    display: block;
  }

  /* Scroll reveal animation */
  [data-scroll-reveal] {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s ease;
  }

  [data-scroll-reveal].revealed {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  // Category filtering functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterTabs = document.querySelectorAll('.filter-tab');
    const posts = document.querySelectorAll('[data-category]');

    // Set default active tab
    const defaultTab = document.querySelector('.filter-tab[data-category="all"]');
    if (defaultTab) {
      defaultTab.classList.add('active');
    }

    filterTabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const category = tab.getAttribute('data-category');
        
        // Update active tab
        filterTabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        
        // Filter posts
        posts.forEach(post => {
          const postCategory = post.getAttribute('data-category');
          if (category === 'all' || postCategory === category) {
            post.style.display = 'block';
            post.style.opacity = '0';
            post.style.transform = 'translateY(20px)';
            
            // Trigger reveal animation
            setTimeout(() => {
              post.style.opacity = '1';
              post.style.transform = 'translateY(0)';
            }, 100);
          } else {
            post.style.display = 'none';
          }
        });
      });
    });

    // Scroll reveal animation
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;
          const delay = element.getAttribute('data-delay') || 0;
          
          setTimeout(() => {
            element.classList.add('revealed');
          }, parseInt(delay));
          
          observer.unobserve(element);
        }
      });
    }, observerOptions);

    // Observe all elements with data-scroll-reveal
    const elements = document.querySelectorAll('[data-scroll-reveal]');
    elements.forEach(el => observer.observe(el));
  });
</script>