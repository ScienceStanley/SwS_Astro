---
import '@styles/global.css';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  noIndex?: boolean;
}

const { 
  title = 'Smarter with Science - Community-Powered Discovery', 
  description = 'Where cutting-edge science meets community warmth. Join Science Stanley and the SwS movement to accelerate scientific breakthroughs through collective action.',
  image = '/og-image.png',
  noIndex = false
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="en" data-theme="cyber">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.site)} />
    <meta property="og:site_name" content="Smarter with Science" />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(image, Astro.site)} />
    
    <!-- Theme Color -->
    <meta name="theme-color" content="#663399" />
    
    <!-- View Transitions -->
    <ViewTransitions />
    
    <!-- Critical CSS for immediate render -->
    <style is:inline>
      body {
        margin: 0;
        background: #000000;
        color: white;
        font-family: system-ui, -apple-system, sans-serif;
      }
      
      .loading-screen {
        position: fixed;
        inset: 0;
        background: #000000;
        z-index: 9999;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: opacity 0.5s ease-out;
      }
      
      .loading-screen.fade-out {
        opacity: 0;
        pointer-events: none;
      }
      
      .warp-core-loader {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background: radial-gradient(circle at center, #00D4FF 0%, #663399 50%, transparent 70%);
        animation: warp-core-pulse 2s ease-in-out infinite;
      }
      
      @keyframes warp-core-pulse {
        0%, 100% { transform: scale(1); opacity: 0.8; }
        50% { transform: scale(1.2); opacity: 1; }
      }
    </style>
  </head>
  
  <body>
    <!-- Loading Screen -->
    <div class="loading-screen" id="loading-screen">
      <div class="warp-core-loader"></div>
    </div>
    
    <!-- Cyber Grid Background -->
    <div class="fixed inset-0 cyber-grid opacity-10 pointer-events-none" aria-hidden="true"></div>
    
    <!-- Particle System Container -->
    <div id="particles-container" class="fixed inset-0 pointer-events-none" aria-hidden="true"></div>
    
    <!-- Main Content -->
    <slot />
    
    <!-- Theme Script -->
    <script is:inline>
      // Theme management
      const theme = localStorage.getItem('sws-theme') || 'cyber';
      document.documentElement.setAttribute('data-theme', theme);
      
      // Remove loading screen
      window.addEventListener('load', () => {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
          loadingScreen.classList.add('fade-out');
          setTimeout(() => loadingScreen.remove(), 500);
        }
      });
      
      // Listen for theme changes
      window.addEventListener('theme-change', (e) => {
        const newTheme = e.detail.theme;
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('sws-theme', newTheme);
        
        // Trigger theme transition animation
        document.body.classList.add('theme-transitioning');
        setTimeout(() => {
          document.body.classList.remove('theme-transitioning');
        }, 500);
      });
    </script>
    
    <!-- Quantum Ripple Effect -->
    <script>
      document.addEventListener('click', (e) => {
        // Skip if clicking on interactive elements
        if (e.target.closest('button, a, input, textarea, select')) return;
        
        const ripple = document.createElement('div');
        ripple.style.cssText = `
          position: fixed;
          width: 20px;
          height: 20px;
          background: #00D4FF;
          border-radius: 50%;
          left: ${e.clientX}px;
          top: ${e.clientY}px;
          transform: translate(-50%, -50%) scale(0);
          animation: ripple-expand 1s ease-out forwards;
          pointer-events: none;
          z-index: 9998;
        `;
        
        const style = document.createElement('style');
        style.textContent = `
          @keyframes ripple-expand {
            to {
              transform: translate(-50%, -50%) scale(10);
              opacity: 0;
              box-shadow: 0 0 40px 40px rgba(0, 212, 255, 0);
            }
          }
        `;
        
        if (!document.querySelector('style[data-ripple]')) {
          style.setAttribute('data-ripple', '');
          document.head.appendChild(style);
        }
        
        document.body.appendChild(ripple);
        setTimeout(() => ripple.remove(), 1000);
      });
    </script>
    
    <!-- Global CSS for theme transitions -->
    <style>
      .theme-transitioning * {
        transition: all 500ms cubic-bezier(0.4, 0, 0.2, 1) !important;
      }
    </style>
  </body>
</html>